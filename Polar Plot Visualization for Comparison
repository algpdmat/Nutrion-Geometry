# -*- coding: utf-8 -*-
"""
Polar plot visualization for comparing body metrics.
"""

import numpy as np
import matplotlib.pyplot as plt

def plot_polar_triplets_comparison(vars1, vars2, custom_plot_names=None):
    """
    Plots polar triplets comparing two sets of body metrics.

    Parameters:
    vars1 (list): First set of body metrics.
    vars2 (list): Second set of body metrics.
    custom_plot_names (list of lists): Custom names for the plots.

    Returns:
    None
    """
    triplets = [
        (4, 3, 2),
        (0, 5, 3),
        (0, 5, 2),
        (0, 1, 2),
        (0, 4, 3),
        (0, 3, 2),
        (0, 5, 1),
        (0, 4, 1),
        (0, 3, 1),
    ]

    triplet_names = [
        '%GC, Fat Mass, Muscle Mass',
        'Weight, Waist Circumference, Fat Mass',
        'Weight, Waist Circumference, Muscle Mass',
        'Weight, Height, Muscle Mass',
        'Weight, %GC, Fat Mass',
        'Weight, Fat Mass, Muscle Mass',
        'Weight, Waist Circumference, Height',
        'Weight, %GC, Height',
        'Weight, Fat Mass, Height',
    ]

    if custom_plot_names is None:
        custom_plot_names = [[f'Plot {i+1} - A', f'Plot {i+1} - B', f'Plot {i+1} - C'] for i in range(len(triplets))]
    else:
        if len(custom_plot_names) != len(triplets):
            raise ValueError("Number of custom plot names does not match the number of plots.")

    fig, axs = plt.subplots(3, 3, subplot_kw=dict(polar=True), figsize=(15, 15))

    for i, indices in enumerate(triplets):
        ax = axs[i//3, i%3]
        angles = np.linspace(0, 2 * np.pi, 4)[:3]

        # Plot for the first set of variables
        radii1 = np.array([vars1[index] for index in indices])
        ax.fill(np.append(angles, angles[0]), np.append(radii1, radii1[0]), color='blue', alpha=0.3, label='User')

        # Plot for the second set of variables
        radii2 = np.array([vars2[index] for index in indices])
        ax.fill(np.append(angles, angles[0]), np.append(radii2, radii2[0]), color='red', alpha=0.3, label='Dino')

        ax.set_title(triplet_names[i])

        vertex_names = custom_plot_names[i]
        ax.set_xticks([0, 2 * np.pi / 3, 4 * np.pi / 3])
        ax.set_xticklabels(vertex_names)

        ax.legend(loc='upper right')

    plt.tight_layout()
    plt.show()
